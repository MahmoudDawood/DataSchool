// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  firstName   String
  lastName    String
  gender      Gender
  phone       String       @unique
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  enrollments Enrollment[]
  reviews     Review[]
  comments    Comment[]
  likes       Like[]
  instructor  Instructor?
}

enum Gender {
  MALE
  FEMALE
}

model Instructor {
  jobTitle    String
  about       String
  photo       String?
  socialMedia Json?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses     Course[]
  posts       Post[]
}

model Enrollment {
  userId        String
  courseId      String
  enrolledAt    DateTime @default(now())
  payment       Float
  originalPrice Float
  progress      Int?     @default(0)
  currentLesson Int?     @default(1)
  user          User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  course        Course   @relation(fields: [courseId], references: [id], onDelete: NoAction)

  @@id([userId, courseId])
}

model Course {
  id           String       @id @default(uuid())
  title        String       @unique
  instructorId String
  about        String
  content      String
  outcomes     String[]
  preview      String
  duration     Int          @default(0)
  price        Float
  photo        String?
  rating       Float?       @default(0)
  views        Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  instructor   Instructor   @relation(fields: [instructorId], references: [userId], onDelete: NoAction, onUpdate: Cascade)
  topics       Topic[]
  enrollments  Enrollment[]
  reviews      Review[]
  sections     Section[]
}

model Topic {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
  posts   Post[]
}

model Section {
  id       String   @id @default(uuid())
  title    String
  duration Int      @default(0)
  order    Int
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id        String   @id @default(uuid())
  title     String
  video     String?
  content   String?
  files     String[]
  links     String[]
  duration  Int
  order     Int
  sectionId String
  section   Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model Review {
  userId    String
  courseId  String
  comment   String?
  rating    Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model Post {
  id        String     @id @default(uuid())
  authorId  String
  title     String
  image     String?
  content   String
  createdAt DateTime   @default(now())
  author    Instructor @relation(fields: [authorId], references: [userId], onDelete: NoAction)
  topics    Topic[]
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  comment   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}
